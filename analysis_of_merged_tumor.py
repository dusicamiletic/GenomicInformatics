# -*- coding: utf-8 -*-
"""Analysis of merged-tumor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dwRN5G3hOAVRJFGEThbbLL41hEi7-rnA
"""

pip install pysam

import pysam

from google.colab import files

uploaded = files.upload()

!ls -lh /content/merged-tumor.bam

import pysam

try:
    fasta = pysam.Fastafile("/content/merged-tumor.bam")
    print("Datoteka uspešno otvorena.")
except Exception as e:
    print("Došlo je do greške prilikom otvaranja datoteke:")
    print(e)

!ls /content/

!ls /content/merged-tumor.bam

!apt-get install samtools

!samtools quickcheck /content/merged-tumor.bam

!samtools view /content/merged-tumor.bam | head

import pysam

try:
    fasta = pysam.Fastafile("/content/merged-tumor.bam")
    print("Datoteka uspešno otvorena.")
except Exception as e:
    print("Došlo je do greške prilikom otvaranja datoteke:")
    print(e)

import os

# Provera da li datoteka postoji na određenoj putanji
file_path = "/content/merged-tumor.bam"
if os.path.exists(file_path):
    print("Datoteka postoji.")
else:
    print("Datoteka ne postoji na navedenoj putanji.")

import os

# Provera dozvola za datoteku
file_path = "/content/merged-tumor.bam"
permissions = os.access(file_path, os.R_OK)
if permissions:
    print("Imate dozvolu za čitanje datoteke.")
else:
    print("Nemate dozvolu za čitanje datoteke ili datoteka nije čitljiva.")

try:
    with pysam.AlignmentFile("/content/merged-tumor.bam", "rb") as bamfile:
        print("Datoteka uspešno otvorena.")
        fasta=pysam.AlignmentFile("/content/merged-tumor.bam")
        first_read = next(fasta)
        print(first_read)
        print("Ime zapisa: ", first_read.query_name)
        print("Flag: ", first_read.flag)
        print("Id referentnog kontiga na koji je read mapiran: ", first_read.reference_id)
        print("Pozicija na kojoj se read poravnava: ", first_read.reference_start)
        print("Read je zapravo poravnat na poziciju 9483249 na referentnom kontigu, jer indeksiranje počinje od 0")
        print("Kvalitet mapiranja: ", first_read.mapping_quality)
        print("CIGAR string koji opisuje mapiranje: ", first_read.cigarstring)
        print("Id ref kontiga na koji je mate read mapiran: ", first_read.next_reference_id)
        print("Pocetna pozicija mate read-a na referenci: ", first_read.next_reference_start)
        print("Read je zapravo poravnat na poziciju 9483382 na referentnom kontigu, jer indeksiranje počinje od 0")
        print("Fizicka udaljenost između parova: ", first_read.template_length)
        print("Sekvenca: ", first_read.query_sequence)
        print("Kvaliteti baza zapisa: ", first_read.query_qualities)
        print("Sto se tice flag-a: read paired, read mapped in proper pair, mate reverse strand, second in pair, read is PCR or optical duplicate")
        references = fasta.references
except Exception as e:
    print("Došlo je do greške prilikom otvaranja datoteke:")
    print(e)

#otvaram BAM fajl za citanje
with pysam.AlignmentFile("/content/merged-tumor.bam", "rb") as bamfile:
    # Brojač za nemapirane readove
    unmapped_reads_count = 0

    # Iteriranje kroz sve read-ove
    for read in bamfile:
        # Provera da li je trenutni read nemapiran
        if read.is_unmapped:
            unmapped_reads_count += 1

# Ispis broja nemapiranih readova
print("Broj nemapiranih read-ova je:", unmapped_reads_count)

!samtools index /content/merged-tumor.bam

with pysam.AlignmentFile("/content/merged-tumor.bam", "rb") as bamfile:
    # Brojanje ukupnog broja read-ova
    total_reads_count = bamfile.count()

print("Ukupan broj read-ova:", total_reads_count)

with pysam.AlignmentFile("/content/merged-tumor.bam", "rb") as bamfile:
    # Brojač za read-ove sa kvalitetom mapiranja 0
    zero_mapping_quality_reads_count = 0

    # Iteriranje kroz sve read-ove
    for read in bamfile:
        # Provera da li je kvalitet mapiranja 0
        if read.mapping_quality == 0:
            zero_mapping_quality_reads_count += 1

# Ispis broja read-ova sa kvalitetom mapiranja 0
print("Broj read-ova sa kvalitetom mapiranja 0:", zero_mapping_quality_reads_count)

with pysam.AlignmentFile("/content/merged-tumor.bam", "rb") as bamfile:
    # Inicijalizacija promenljivih za sumu kvaliteta mapiranja i ukupan broj očitavanja
    total_mapping_quality_sum = 0
    total_reads_count = 0

    # Iteriranje kroz sve read-ove
    for read in bamfile:
        # Dodavanje kvaliteta mapiranja ovog read-a u sumu
        total_mapping_quality_sum += read.mapping_quality
        # Inkrementacija brojača ukupnog broja read-ova
        total_reads_count += 1

# Izračunavanje prosečnog kvaliteta mapiranja
average_mapping_quality = total_mapping_quality_sum / total_reads_count

# Ispis prosečnog kvaliteta mapiranja
print("Prosečan kvalitet mapiranja za sve read-ove:", average_mapping_quality)

with pysam.AlignmentFile("/content/merged-tumor.bam", "rb") as bamfile:
    # Inicijalizacija promenljivih za sumu kvaliteta mapiranja i ukupan broj read-ova
    #kada izostavimo read-ove ciji je kvalitet mapiranja nula
    total_mapping_quality_sum = 0
    total_reads_count = 0

    # Iteriranje kroz sve read-ove
    for read in bamfile:
        # Provera da li je kvalitet mapiranja veći od 0
        if read.mapping_quality > 0:
            # Dodavanje kvaliteta mapiranja ovog read-ova u sumu
            total_mapping_quality_sum += read.mapping_quality
            # Inkrementacija brojača
            total_reads_count += 1

# Izračunavanje prosečnog kvaliteta mapiranja
average_mapping_quality = total_mapping_quality_sum / total_reads_count

# Ispis prosečnog kvaliteta mapiranja
print("Prosečan kvalitet mapiranja za read-ove sa kvalitetom vecim od 0:", average_mapping_quality)

